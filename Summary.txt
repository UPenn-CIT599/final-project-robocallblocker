Program Name: 
Robo-Call Blocker 

Description: 
Program first generates the user's contact list by randomly taking 40 to 60 contacts from a csv file filled with 198 contacts. Each one of these contacts may consist of some or all of the following: name, company, address, city, county, state, zip, phone number, email, and social media. The program then creates a caller by randomly taking a contact from the csv file and then comparing it to the user's contact list to determine whether or not it is spam. For each call, the user is given the option to accept and then start a new call or to decline and generate a list of callers that were determined to be spam. The program also outputs a text file of these callers who were blocked. 

Github repository link:
https://github.com/UPenn-CIT599/final-project-robocallblocker.git 

Work Breakdown: 

Shawn - 
Created initial ContactInfo class to have an object hold various contact information attributes such as name, number, email address, etc. Created initial ContactInfoReader class to process our CSV file of contact information to populate a hashmap of keys and ContactInfo objects. Created initial UsersContactList class which essentially creates the user's contact list by randomly picking contacts from the CSV file using collections.shuffle to shuffle the keys. Josh and Thomas also significantly contributed to these classes. Contributed to Thomas's initial SpamAlgorithm class by tweaking the conditional statements to exclude values where cells were empty or zero. Additionally, tweaked the class to add the blockList logic inside the compareAgainst() method. Contributed to Phone class with initial ringtone method using AudioInputStream; Thomas helped me refine this. Next, added the blockList logic to output a text file of the list of spam callers using FileWriter and StringBuilder to display the list in the GUI. Lastly, added the BlockButton and ActionListener into Josh's initial GUI class. Josh helped me refine the output.

Josh - Created CallBlockerGUI class, assembled the GUI from the start (creating JFrame, adding buttons, adding actionListeners for accept, and start, decline) and linked all classes together to properly function with the GUI. Worked extensively on formatting and creating the entire GUI (colors, images, labels, GUI layout, panels, buttons, methods to format buttons and labels) and created methods to handle conditional cases for the GUI such as what to display when a call is spam or not spam, and added statistics at the end when the "decline button" is pressed. Created phone class and handled development for passing completed processes from phone to the GUI, by using DRY principles and ensuring all objects from other classes (such as SpamAlgorithm) were properly implemented in the phone class. Shawn created (and came up w/ the idea) for the ringtone in the phone class, and figured out how to properly design and pass that into the GUI. I employed methods that passed return values from phone class to the GUI (incoming caller number, name, etc.) to tie the GUI class into the entire program seamlessly. Ensured good design practices were used across all classes by refining code to employ getters and setters for any object created within classes, to edit instances of the object.  

Refined spamAlgorithm (multiple times), compareAgainst() method due to issues with double counting and ensured that the algorithm scored calls properly, and created multiple test cases and edge cases for tests in SpamAlgorithmTest.java. Created mapForScoring() and scoreIncomingCallByAttribute() methods to pass to compareAgainst() (thomas originally created compareAgainst with the majority of the comparing/iterating over the value set of HashMap vs. incomingCall). Created testCreateIncomingCallDisplayOnGUI test for phone class, in PhoneTest.java. Created most tests for CallBlockerGUI, by initiating a robot that clicked in the program and used assertTrue, etc. to ensure that when the robot clicked buttons after GUI was initialized, the expected outcomes occured. Thomas also was excellent in helping create a few tests for the GUI class as well. Created method to handle blanks for ContactInfoReader file, and method that used an iterator object to remove blank phone numbers from HashMap used to generate random incoming calls. 


Thomas - 
Worked on CallBlockerGUI class button action listener and control of ringtone start and stop. Worked on IncomingCall class to randomly generate a caller from CSV HashMap. Worked on Phone class to class upon other classes to generate CSV HashMap, user's contact list, random caller, and compare caller to user's contact list. Worked on SpamAlgorithm class to compare caller to user's contact list based on number of matches. Worked on UsersContactList class to create user contact list from CSV HashMap. Worked to create JUnit tests for CallBlockerGUI, ContactInfoReader,  and SpamAlgorithm 
